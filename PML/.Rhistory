Sys.setlocale("Macintosh HD")
help(LC_Messages)
help(LC_MESSAGES)
Sys.setlocale(category = "LC_ALL", locale = "")
Sys.setlocale(category = "LC_ALL", locale = "China")
Sys.setlocale(category = "LC_ALL", locale = "de_DE")
if
1+1==2
for
a
x<-c("a","b","c","d")
for(i in 1:4){print(x[i])}
for(i in seq_along(x)){print(x[i])}
for(letter in x){print(x[i])}
x<-matrix(1:6, 2, 3)
x
for(i in seq_len(nrow(x))){}
for(i in seq_len(nrow(x))){print x[i,1]}
for(i in seq_len(nrow(x))){print x[i]}
mydata<-rnorm(100)
mydata
sd(mydata)
args(sd)
sd(x=mydata)
sd(x=mydata,na.rm=FALSE)
cube<-function(x,n){x^3}
function
c
cube
cube(3)
lm(data=mydata,y~x,model=FALSE,1:100)
lm(y~x,mydata,1:100,model=FALSE)
pow<-function(a=1,b=2){a^b}
pow()
library(datasets)
data(iris)
?iris
iris
x<-subset(iris,iris$Species==virginica)
args(subset)
x<-subset(iris,Species==virginica)
x<-subset(iris,Species==virginica,select = )
x<-subset(iris, Species==virginica)
x
iris
y<-subset(iris, iris$Species==virginica)
args(cat)
lm<-function(x){x*x}
search()
.GlobalEnv
library(survival)
f<-function(x,y){x^2+y/z}
make.power<-function(n){pow<-function(x){x^n}pow}
optim
laplly
lapply
x<-list(a=1:5,b=rnorm(10))
lapply(x,mean)
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x
lapply(x,mean)
x<1:4
x<-1:4
x
lapply(x,runif)
args(runif)
x<-1:4
x
lapply(x,runif,min=0,max=10)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
sapply(x,mean)
mean(x)
x
sapply(x,mean)
apply(x)
x<-c(1:4,2:5)
x
x<-c(1:4;2:5)
str(apply)
x<-matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
x
apply(x,2,mean)
str(apply)
array(rnorm(2*2*10))
a<-array(rnorm(2*2*10),c(2,2,10))
a
apply(a,c(1,2),mean)
apply(a,c(1,3),mean)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f<-gl(3,10)
f
?isir
library(dataset)
library(datasets)
data(iris)
?iris
iris
matrix<-iris(101:105)
matrix<-iris[101:105]
matrix<-iris[,101:105]
matrix<-subset(iris[,101:105])
matrix<-subset(iris[101:105])
matrix<-subset(iris[105])
matrix<-subset(iris,Species==virginica,select=Sepal.Length)
matrix<-subset(iris,Species==setosa,select=Sepal.Length)
matrix<-subset(iris,Petal.Width==0.1,select=Sepal.Length)
matrix
matrix<-subset(iris,Petal.Width==0.1)
matrix
LC_CTYPE
Sys.getlocale("LC_CTYPE")
Sys.setlocale("LC_CTYPE","C")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(inTrain)
head(inTrain)
summary(inTrain)
inTrain
concrete
head(concrete)
summary(concrete$Superplasticizer)
concrete$Superplasticizer
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
inTrain <- createDataPartition(y=spam$type, p = 0.75, list=FALSE)
data(spam)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p = 0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
spam$capitalAveSq <- spam$capitalAve^2
spam$capitalAveSq
library(caret)
training
library(ISLR)
ls
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1, newdata)
par(mfrow=c(1,2))
proc <- function(x){
y <- NULL
a <- NULL
for(i in 1:length(x))
{
a <- summary(x[,i])[7]
if(is.na(a)==FASLE){
if((a>19215)==TRUE){y <- cbind(y,i)}
}
}
return(y)
}
proc(traing)
library(ggplot2)
library(lattice)
library(caret)
library(knn)
library(class)
library(chemometrics)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
setwd("/Users/Yanyan/Works/GitHub Repositories/R/PML/")
library(ggplot2)
library(lattice)
library(caret)
library(knn)
library(class)
library(chemometrics)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
proc(training)
proc <- function(x){
y <- NULL
a <- NULL
for(i in 1:length(x))
{
a <- summary(x[,i])[7]
if(is.na(a)==FALSE){
if((a>19215)==TRUE){y <- cbind(y,i)}
}
}
return(y)
}
proc(training)
t <- cbind(proc(training), proc2(training))
work <- training
work <- work[,-t]
inTrain <- work[,c(-1,-2,-3,-4,-5,-6,-7)]
proc <- function(x){
y <- NULL
a <- NULL
for(i in 1:length(x))
{
a <- summary(x[,i])[7]
if(is.na(a)==FALSE){
if((a>19215)==TRUE){y <- cbind(y,i)}
}
}
return(y)
}
proc2 <- function(x){
y <- NULL
b <- NULL
for(i in 1:length(x))
{
b <- summary(x[,i])[1]
if(names(b)==""){
if((b==19216)==TRUE){y <- cbind(y,i)}
}
}
return(y)
}
t <- cbind(proc(training), proc2(training))
work <- training
work <- work[,-t]
inTrain <- work[,c(-1,-2,-3,-4,-5,-6,-7)]
modelFit <- train(classe ~., method="knn", preProcess = c("center", "scale"),
data=inTrain, tuneLength = 10, trControl = trainControl(method = "boot"))
modelFit$finalModel
modelFit$results
modelFit$finalModel
data(fgl,package="MASS")
grp=fgl$type
X=scale(fgl[,1:9])
k=length(unique(grp))
dat=data.frame(grp,X)
n=nrow(X)
ntrain=round(n*2/3)
require(class)
set.seed(123)
train=sample(1:n,ntrain)
resknn=knnEval(X,grp,train,knnvec=seq(1,30,by=1),legpos="bottomright")
title("kNN classification")
modelFit$metric
modelFit$xlevels
modelFit$finalModel
modelFit$modelInfo
modelFit$modelType
modelFit$pred
modelFit$bestTune
modelFit$call
modelFit$metric
modelFit$control
modelFit$xlevels
modelFit$coefnames
modelFit$terms
modelFit$perfNames
data(fgl,package="MASS")
grp=fgl$type
X=scale(fgl[,1:9])
k=length(unique(grp))
dat=data.frame(grp,X)
n=nrow(X)
ntrain=round(n*2/3)
require(class)
set.seed(123)
train=sample(1:n,ntrain)
resknn=knnEval(X,grp,train,knnvec=seq(1,30,by=1),legpos="bottomright")
title("kNN classification")
resknn$knnvec
resknn$trainerr
resknn$testerr
resknn$cvMean
resknn$cvSe
resknn$testerr
train = sample(1:nrow(inTrain), round(nrow(inTrain)*2/3))
knnEval(inTrain, inTrain$classe, train, knnvec=seq(1:23,by=1), legpos="bottomright")
knnEval(inTrain, inTrain$classe, train, knnvec=seq(1:30,by=1), legpos="bottomright")
scaleinTrain = scale(inTrain[,1:52])
n = nrow(inTrain)
ntrain = round(n*2/3)
set.seed(123)
train = sample(1:n, ntrain)
resknn=knnEval(scaleinTrain,inTrain$classe,train,knnvec=seq(1,30,by=1),legpos="bottomright")
resknn=knnEval(scaleinTrain,inTrain$classe,train,knnvec=seq(1,30,by=1),legpos="bottomright")
title("kNN classification")
getwd()
